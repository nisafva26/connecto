import 'dart:developer';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:connecto/feature/auth/model/user_model.dart';
import 'package:connecto/feature/bond_score/screens/bond_relationship_screen.dart';
import 'package:connecto/feature/dashboard/screens/bonds_screen.dart';
import 'package:connecto/feature/gatherings/providers/chat_gathering_provider.dart';
import 'package:connecto/feature/gatherings/screens/select_location_screen.dart';
import 'package:connecto/feature/pings/model/message_model.dart';
import 'package:connecto/feature/pings/model/ping_model.dart';
import 'package:connecto/feature/pings/screens/ping_list_screen.dart';
import 'package:connecto/feature/pings/widgets/ping_visualizer_chat.dart';
import 'package:connecto/feature/pings/widgets/ping_visulaizer.dart';
import 'package:connecto/helper/get_initials.dart';
import 'package:connecto/main.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:loading_indicator/loading_indicator.dart';

final userProvider = FutureProvider.family<UserModel, String>((ref, uid) async {
  final doc =
      await FirebaseFirestore.instance.collection('users').doc(uid).get();
  return UserModel.fromMap(doc.data()!, doc.id);
});

final messagesProvider =
    StreamProvider.family<List<MessageModel>, String>((ref, chatId) {
  return FirebaseFirestore.instance
      .collection('chats')
      .doc(chatId)
      .collection('messages')
      .orderBy('timestamp', descending: false)
      .snapshots()
      .map((snapshot) {
    // log('snapshot : message : ${snapshot.docs}');
    return snapshot.docs.map((doc) => MessageModel.fromFirestore(doc)).toList();
  });
});

class PingChatScreen extends ConsumerWidget {
  final String chatId;
  final String friendId;
  final String friendName;
  // final String friendProfilePic;
  // final UserModel friend;

  const PingChatScreen({
    super.key,
    required this.chatId,
    required this.friendId,
    required this.friendName,
    // required this.friendProfilePic,
    // required this.friend
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final ScrollController _scrollController = ScrollController();

    void _scrollToBottom() {
      Future.delayed(Duration(milliseconds: 10), () {
        if (_scrollController.hasClients) {
          _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
        }
      });
    }

    final messagesAsync = ref.watch(messagesProvider(chatId));

    //gathering chat provider
    final gatheringListAsync = ref.watch(chatGatheringsProvider(friendId));

    final currentUser = FirebaseAuth.instance.currentUser!.uid;

    final userAsync = ref.watch(currentUserProvider);
    final user = userAsync.asData?.value;

    String getBondId(String a, String b) {
      final sorted = [a, b]..sort();
      return "${sorted[0]}_${sorted[1]}";
    }

    Future<void> sendPingNotification({
      required String vibrationPattern,
      required String chatId,
      required String friendId,
      required String friendName,
    }) async {
      try {
        final callable =
            FirebaseFunctions.instance.httpsCallable('sendPingNotification');

        final response = await callable.call({
          'vibrationPattern': vibrationPattern,
          'chatId': chatId,
          'friendId': friendId,
          'userId' : user!.id,
          'friendName': user.fullName,
        });

        print('‚úÖ Ping sent: ${response.data}');
      } catch (e) {
        print('‚ùå Error sending ping: $e');
      }
    }

    Future<void> sendPingMessage(String chatId, String senderId,
        String receiverId, PingModel ping) async {
      final messageRef = FirebaseFirestore.instance
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .doc();

      await messageRef.set({
        'messageId': messageRef.id,
        'senderId': senderId,
        'receiverId': receiverId,
        'text': ping.name,
        'timestamp': FieldValue.serverTimestamp(),
        'isAutoGenerated': false,
        'pingPattern': ping.pattern,
      });

      sendPingNotification(
          chatId: chatId,
          vibrationPattern: ping.pattern.join(','),
          friendId: receiverId,
          friendName: friendName);

      // Update lastMessage in chat
      await FirebaseFirestore.instance.collection('chats').doc(chatId).update({
        'lastMessage': {
          'text': ping.name,
          'timestamp': FieldValue.serverTimestamp(),
          'senderId': senderId
        }
      });

      // //updating chat flag.

      // await FirebaseFirestore.instance
      //     .collection('users')
      //     .doc(receiverId)
      //     .collection('chatFlags')
      //     .doc(senderId)
      //     .set({
      //   'latestPingFromFriend': true,
      //   'lastUpdated': FieldValue.serverTimestamp(),
      // }, SetOptions(merge: true));
    }

    Future<void> updateChatFlag({
      required String friendId,
      required String ping,
    }) async {
      final uid = FirebaseAuth.instance.currentUser!.uid;
      final firestore = FirebaseFirestore.instance;

      final now = FieldValue.serverTimestamp();

      // Update for current user (sender)
      await firestore
          .collection('users')
          .doc(uid)
          .collection('chatFlags')
          .doc(friendId)
          .set({
        'lastActivity': now,
        'hasPendingGathering': false,
        'latestPingFrom': uid,
        'isChatOpened': false,
        'latestPingFromFriend': false,
        'lastPingText': ping,
      }, SetOptions(merge: true));

      // üîÅ Update for receiver
      await firestore
          .collection('users')
          .doc(friendId)
          .collection('chatFlags')
          .doc(uid)
          .set({
        'lastActivity': now,
        'hasPendingGathering': false,
        'latestPingFrom': uid,
        'isChatOpened': false,
        'latestPingFromFriend': true,
        'lastPingText': ping,
      }, SetOptions(merge: true));
    }

    final friendAsync = ref.watch(userProvider(friendId));

    final bondId = getBondId(currentUser, friendId);

    final bondAsync = ref.watch(bondProvider(bondId));

    final bond = bondAsync.asData?.value;

    // log('===bond async value : $bond');

    return friendAsync.when(
        data: (friend) {
          return Scaffold(
            backgroundColor: Color(0xff001311),
            // appBar: AppBar(
            //   backgroundColor: Color(0xff091F1E),
            //   leading: IconButton(
            //     icon: Icon(Icons.arrow_back, color: Colors.white),
            //     onPressed: () => context.pop(),
            //   ),
            //   title: Row(
            //     children: [
            //       CircleAvatar(
            //         backgroundColor: Colors.grey,
            //       ),
            //       SizedBox(width: 10),
            //       Text(friendName,
            //           style: TextStyle(color: Colors.white, fontSize: 18)),
            //       SizedBox(width: 5),
            //       Icon(Icons.circle,
            //           size: 10, color: Colors.green), // Online Indicator
            //     ],
            //   ),
            // ),
            appBar: PreferredSize(
              preferredSize: Size.fromHeight(100), // ‚úÖ Set custom height
              child: Container(
                padding: EdgeInsets.only(
                    top: MediaQuery.of(context)
                        .padding
                        .top), // Status bar safe area
                decoration: BoxDecoration(
                  color: Color(
                      0xff091F1E), // ‚úÖ Background color matching the design
                  borderRadius: BorderRadius.vertical(
                    bottom: Radius.circular(10), // ‚úÖ Optional rounded bottom
                  ),
                ),
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: 0, vertical: 10),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // üîô Back Button
                      IconButton(
                        icon: Icon(Icons.arrow_back, color: Colors.white),
                        onPressed: () => Navigator.pop(context),
                      ),
                      // Spacer(flex: 1,),

                      // Friend Name & Online Status
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          // üì∏ Profile Picture + Name
                          CircleAvatar(
                            radius: 15,
                            backgroundColor: Colors.white,
                            child: Text(
                              getInitials(friendName),
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            // backgroundImage:
                            //     NetworkImage(friendProfilePic), // ‚úÖ Use actual image URL
                          ),
                          SizedBox(height: 6),
                          Text(
                            friendName,
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                      TextButton(
                          onPressed: () {
                            context.push(
                              '/bond-relation/${friend.id}',
                              extra: {
                                'friendName': friend.fullName,
                              },
                            );
                          },
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.emoji_events,
                                color: Theme.of(context).colorScheme.primary,
                                size: 20,
                              ),
                              bond == null
                                  ? Text('Lvl 1')
                                  : Text('Lvl ${bond.level}')
                            ],
                          )

                          // Text("View",
                          //     style: TextStyle(
                          //         color: Theme.of(context).colorScheme.primary,
                          //         fontSize: 16)),
                          ),
                      // Spacer(flex: 2,)
                    ],
                  ),
                ),
              ),
            ),
            body: Column(
              children: [
                gatheringListAsync.when(
                  data: (gatherings) {
                    final now = DateTime.now();
                    final filteredGatherings = gatherings
                        .where((g) => g.dateTime.isAfter(now))
                        .toList();
                    log('gatherings : $gatherings');

                    // log('gathering date time : ${gatherings[].dateTime} : now timw : $now');

                    log("filteredGatherings : $filteredGatherings");

                    if (filteredGatherings.isEmpty) return SizedBox();

                    return Column(
                      children: filteredGatherings.map((gathering) {
                        final uid = FirebaseAuth.instance.currentUser!.uid;
                        final isHost = gathering.hostId == uid;
                        final status =
                            gathering.invitees[uid]?.status ?? 'pending';
                        final timeFormatted =
                            DateFormat('hh:mm a - dd MMM yyyy')
                                .format(gathering.dateTime);

                        String text;
                        if (isHost || status == 'accepted') {
                          text =
                              "You are meeting ${friend.fullName} for ${gathering.eventType}";
                        } else {
                          text =
                              "You have a gathering request from ${friend.fullName}";
                        }

                        return GestureDetector(
                          onTap: () {
                            context.go(
                                '/gathering/gathering-details/${gathering.id}',
                                extra: gathering);
                          },
                          child: Container(
                            margin: EdgeInsets.only(bottom: 6),
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Color(0xff091F1E),
                              border: Border.symmetric(
                                horizontal: BorderSide(
                                    color: Colors.grey.shade700, width: 0.5),
                              ),
                            ),
                            child: Row(
                              children: [
                                Icon(Icons.hourglass_bottom,
                                    color: Colors.white),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(text,
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 14,
                                              fontWeight: FontWeight.w500)),
                                      const SizedBox(height: 4),
                                      Text(timeFormatted,
                                          style: TextStyle(
                                              color: Colors.grey,
                                              fontSize: 13)),
                                    ],
                                  ),
                                ),
                                Icon(Icons.arrow_forward,
                                    color: Colors.tealAccent)
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                    );
                  },
                  loading: () => SizedBox(),
                  error: (err, _) => SizedBox(),
                ),

                Expanded(
                  child: messagesAsync.when(
                    data: (messages) {
                      WidgetsBinding.instance.addPostFrameCallback((_) {
                        _scrollToBottom(); // üî• Scroll to bottom when messages are loaded
                      });
                      return ListView.builder(
                        controller: _scrollController,
                        padding: EdgeInsets.all(16),
                        itemCount: messages.length,
                        itemBuilder: (context, index) {
                          final message = messages[index];

                          return Align(
                            alignment: message.senderId == friendId
                                ? Alignment.centerLeft
                                : Alignment.centerRight,
                            child: Padding(
                              padding: const EdgeInsets.only(bottom: 24),
                              child: Column(
                                crossAxisAlignment: message.senderId == friendId
                                    ? CrossAxisAlignment.start
                                    : CrossAxisAlignment.end,
                                children: [
                                  if (message.isAutoGenerated)
                                    Padding(
                                      padding: const EdgeInsets.only(bottom: 6),
                                      child: Text(
                                        "Autogenerated at ${message.timestamp}",
                                        style: TextStyle(
                                            fontSize: 12, color: Colors.grey),
                                      ),
                                    ),
                                  Container(
                                    // width: MediaQuery.sizeOf(context).width / 2,
                                    constraints: BoxConstraints(
                                      maxWidth:
                                          MediaQuery.sizeOf(context).width *
                                              0.5, // ‚úÖ Max 75% of screen width
                                      minWidth:
                                          60, // ‚úÖ Minimum width to avoid collapse
                                    ),
                                    margin: EdgeInsets.symmetric(vertical: 4),
                                    padding: EdgeInsets.symmetric(
                                        horizontal: 14, vertical: 12),
                                    decoration: BoxDecoration(
                                      color: message.senderId == friendId
                                          ? Color(0xff091F1E)
                                          : Color(0xff0C6353),
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          message.text,
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 16),
                                        ),
                                        if (message.pingPattern.isNotEmpty) ...[
                                          SizedBox(height: 6),
                                          PingVisualizerChat(
                                              pattern: message.pingPattern),
                                        ]
                                      ],
                                    ),
                                  ),
                                  Text(
                                    "${message.timestamp.hour}:${message.timestamp.minute} ${message.timestamp.hour >= 12 ? 'PM' : 'AM'}",
                                    style: TextStyle(
                                        fontSize: 12, color: Colors.grey),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      );
                    },
                    loading: () => Center(child: CircularProgressIndicator()),
                    error: (err, stack) {
                      log(err.toString());
                      // log(stack.toString());
                      return Center(child: Text("Error loading messages $err"));
                    },
                  ),
                ),

                // Bottom Actions: Send Ping & Create Gathering
                Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                  child: Row(
                    children: [
                      Expanded(
                        child: _bottomActionButton(
                          icon: Icons.emoji_emotions_outlined,
                          label: "Send Ping",
                          onTap: () async {
                            // final selectedPing = await context.pushNamed(
                            //   'ping-list',
                            //   extra: {'chatId': chatId},
                            // );

                            // if (selectedPing != null) {
                            //   // TODO: Send selectedPing to Firestore
                            // }]

                            PingModel? selectedPing =
                                await showModalBottomSheet<PingModel>(
                              context: context,
                              isScrollControlled: true,
                              backgroundColor: Colors.transparent,
                              builder: (context) =>
                                  PingListModal(pings: predefinedPings),
                            );

                            if (selectedPing != null) {
                              log('Selected Ping: ${selectedPing.name}');

                              sendPingMessage(
                                  chatId,
                                  FirebaseAuth.instance.currentUser!.uid,
                                  friendId,
                                  selectedPing);

                              updateChatFlag(
                                  friendId: friendId, ping: selectedPing.name);
                            }
                          },
                        ),
                      ),
                      const SizedBox(width: 10),
                      Expanded(
                        child: _bottomActionButton(
                          icon: Icons.hourglass_empty,
                          label: "Create Gathering",
                          onTap: () {
                            // showModalBottomSheet(
                            //   context: context,
                            //   isScrollControlled: true,
                            //   backgroundColor: Colors.transparent,
                            //   builder: (context) =>
                            //       AddLocationScreen(eventType: 'Desert camping'),
                            // );
                            context.go(
                              '/bond/chat/$chatId/create-gathering/$friendId',
                              extra: {
                                'friendId': friend.id,
                                'friendName': friend.fullName,
                                'friendProfilePic': friend.id,
                                'friend': friend
                              },
                            );

                            // TODO: Implement Create Gathering Feature
                          },
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  height: 30,
                )
              ],
            ),
          );
        },
        loading: () => Scaffold(
              body: Center(
                  child: Container(
                height: 40,
                child: LoadingIndicator(
                  indicatorType: Indicator.ballBeat,
                  colors: [Theme.of(context).colorScheme.primary],
                ),
              )),
            ),
        error: (e, _) => Scaffold(
              body: Center(child: Text("Failed to load user")),
            ));
  }

  /// üîπ Bottom Button Widget
  Widget _bottomActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        height: 99,
        padding: const EdgeInsets.symmetric(vertical: 14),
        decoration: BoxDecoration(
          color: const Color(0xff082523),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 28, color: const Color(0xff03FFE2)),
            const SizedBox(height: 8),
            Text(label,
                style: const TextStyle(color: Colors.white, fontSize: 14)),
          ],
        ),
      ),
    );
  }
}
