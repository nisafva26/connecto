import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:connecto/feature/circles/models/circle_model.dart';
import 'package:connecto/feature/circles/models/group_message_model.dart';
import 'package:connecto/feature/dashboard/screens/bonds_screen.dart';
import 'package:connecto/feature/pings/model/ping_model.dart';
import 'package:connecto/feature/pings/screens/ping_list_screen.dart';
import 'package:connecto/feature/pings/widgets/ping_visualizer_chat.dart';
import 'package:connecto/helper/color_helper.dart';
import 'package:connecto/main.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';

class GroupPingChatScreen extends ConsumerWidget {
  final String circleId;

  final CircleModel circle;

  const GroupPingChatScreen(
      {super.key, required this.circleId, required this.circle});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Clear new message flag when user opens the group chat
    Future<void> clearGroupChatFlag({
      required String circleId,
      required String userId,
    }) async {
      final flagRef = FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .collection('groupChatFlags')
          .doc(circleId);

      await flagRef.update({'hasNewMessage': false});
    }

    final ScrollController _scrollController = ScrollController();
    final currentUser = FirebaseAuth.instance.currentUser!.uid;

    final currentUserAsync = ref.read(currentUserProvider);

    void _scrollToBottom() {
      Future.delayed(Duration(milliseconds: 10), () {
        if (_scrollController.hasClients) {
          _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
        }
      });
    }

    Future<void> updateGroupChatFlagsForNewMessage(
        String circleId, String senderId) async {
      final firestore = FirebaseFirestore.instance;

      // Fetch the circle to get all registered users
      final circleSnapshot =
          await firestore.collection('circles').doc(circleId).get();

      if (!circleSnapshot.exists) return;

      final data = circleSnapshot.data();
      final List<dynamic> registeredUsers = data?['registeredUsers'] ?? [];

      // Loop through users and set flag
      for (final userId in registeredUsers) {
        if (userId != senderId) {
          await firestore
              .collection('users')
              .doc(userId)
              .collection('groupChatFlags')
              .doc(circleId)
              .set({
            'hasNewMessage': true,
            'lastUpdated': FieldValue.serverTimestamp(),
          }, SetOptions(merge: true));
        }
      }
    }

    final messagesStream = FirebaseFirestore.instance
        .collection('groupChats')
        .doc(circleId)
        .collection('messages')
        .orderBy('timestamp', descending: false)
        .snapshots();

    Future<void> sendPingToGroup(PingModel ping) async {
      final messageRef = FirebaseFirestore.instance
          .collection('groupChats')
          .doc(circleId)
          .collection('messages')
          .doc();

      final user = FirebaseAuth.instance.currentUser!;

      await messageRef.set({
        'messageId': messageRef.id,
        'senderId': user.uid,
        'senderName': currentUserAsync.value!.fullName,
        'text': ping.name,
        'timestamp': FieldValue.serverTimestamp(),
        'isAutoGenerated': false,
        'pingPattern': ping.pattern,
      });

      await FirebaseFirestore.instance
          .collection('groupChats')
          .doc(circleId)
          .update({
        'lastMessage': {
          'text': ping.name,
          'timestamp': FieldValue.serverTimestamp(),
          'senderId': user.uid,
        }
      });

      await FirebaseFunctions.instance
          .httpsCallable('sendGroupPingNotification')
          .call({
        "circleId": circleId,
        "messageText": ping.name,
        "senderId": currentUser,
        "senderName": currentUserAsync.value!.fullName,
        "vibrationPattern": ping.pattern.join(','), // ðŸ‘ˆ make sure it's a string
      });

      // âœ… Set flag for others
      await updateGroupChatFlagsForNewMessage(circleId, user.uid);
    }

    // âœ… Clear the hasNewMessage flag when screen opens
    Future.microtask(() async {
      await clearGroupChatFlag(circleId: circleId, userId: currentUser);
    });
    return Scaffold(
      backgroundColor: const Color(0xff001311),
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(100), // âœ… Set custom height
        child: Container(
          padding: EdgeInsets.only(
              top: MediaQuery.of(context).padding.top), // Status bar safe area
          decoration: BoxDecoration(
            color: Color(0xff091F1E), // âœ… Background color matching the design
            borderRadius: BorderRadius.vertical(
              bottom: Radius.circular(10), // âœ… Optional rounded bottom
            ),
          ),
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 0, vertical: 10),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // ðŸ”™ Back Button
                IconButton(
                  icon: Icon(Icons.arrow_back, color: Colors.white),
                  onPressed: () => context.pop(),
                ),
                // Spacer(flex: 1,),

                // Friend Name & Online Status
                Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // ðŸ“¸ Profile Picture + Name
                    CircleAvatar(
                      radius: 18,
                      backgroundColor: hexToColor(circle.circleColor),
                      child: Icon(Icons.groups, color: Colors.white),
                    ),
                    SizedBox(height: 6),
                    Text(
                      circle.circleName,
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
                TextButton(
                  onPressed: () {},
                  child: Text("Add",
                      style:
                          TextStyle(color: Colors.transparent, fontSize: 16)),
                ),
                // Spacer(flex: 2,)
              ],
            ),
          ),
        ),
      ),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: messagesStream,
              builder: (context, snapshot) {
                if (!snapshot.hasData) {
                  return const Center(child: CircularProgressIndicator());
                }

                final docs = snapshot.data!.docs;
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  _scrollToBottom();
                });

                return ListView.builder(
                  controller: _scrollController,
                  padding: const EdgeInsets.all(16),
                  itemCount: docs.length,
                  itemBuilder: (context, index) {
                    final doc = docs[index];
                    final message = GroupMessageModel.fromFirestore(doc);

                    final isMine = message.senderId == currentUser;

                    return Align(
                      alignment:
                          isMine ? Alignment.centerRight : Alignment.centerLeft,
                      child: Container(
                        constraints: BoxConstraints(
                          maxWidth: MediaQuery.sizeOf(context).width *
                              0.5, // âœ… Max 75% of screen width
                          minWidth: 60, // âœ… Minimum width to avoid collapse
                        ),
                        child: Padding(
                          padding: const EdgeInsets.only(bottom: 20),
                          child: Column(
                            crossAxisAlignment: isMine
                                ? CrossAxisAlignment.end
                                : CrossAxisAlignment.start,
                            children: [
                              if (!isMine)
                                Text(
                                  message.senderName,
                                  style: const TextStyle(
                                      fontSize: 12, color: Colors.grey),
                                ),
                              Container(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 14, vertical: 12),
                                decoration: BoxDecoration(
                                  color: isMine
                                      ? const Color(0xff0C6353)
                                      : const Color(0xff091F1E),
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      message.text,
                                      style: const TextStyle(
                                          color: Colors.white, fontSize: 16),
                                    ),
                                    if (message.pingPattern.isNotEmpty)
                                      Padding(
                                        padding: const EdgeInsets.only(top: 6),
                                        child: PingVisualizerChat(
                                            pattern: message.pingPattern),
                                      ),
                                  ],
                                ),
                              ),
                              Text(
                                DateFormat('hh:mm a').format(message.timestamp),
                                style: const TextStyle(
                                    fontSize: 12, color: Colors.grey),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
          // ðŸ”½ Bottom Buttons
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
            child: Row(
              children: [
                Expanded(
                  child: _bottomActionButton(
                    icon: Icons.emoji_emotions_outlined,
                    label: "Send Ping",
                    onTap: () async {
                      PingModel? selectedPing =
                          await showModalBottomSheet<PingModel>(
                        context: context,
                        isScrollControlled: true,
                        backgroundColor: Colors.transparent,
                        builder: (context) =>
                            PingListModal(pings: predefinedPings),
                      );

                      if (selectedPing != null) {
                        sendPingToGroup(selectedPing);
                      }
                    },
                  ),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: _bottomActionButton(
                    icon: Icons.hourglass_empty,
                    label: "Create Gathering",
                    onTap: () {
                      context.push(
                        '/gathering/create-gathering-circle',
                        extra: {
                          'registeredUsers':
                              circle.registeredUsers, // List<UserModel>?
                          'unregisteredUsers': circle.unregisteredUsers,
                        },
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 30)
        ],
      ),
    );
  }

  Widget _bottomActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        height: 99,
        padding: const EdgeInsets.symmetric(vertical: 14),
        decoration: BoxDecoration(
          color: const Color(0xff082523),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 28, color: const Color(0xff03FFE2)),
            const SizedBox(height: 8),
            Text(label,
                style: const TextStyle(color: Colors.white, fontSize: 14)),
          ],
        ),
      ),
    );
  }
}
